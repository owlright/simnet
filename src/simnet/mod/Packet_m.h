//
// Generated file, do not edit! Created by opp_msgtool 6.0 from simnet/mod/Packet.msg.
//

#ifndef __PACKET_M_H
#define __PACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class EthernetMacHeader;
class IPv4Header;
class IPv6Header;
class SegmentRoutingHeader;
class Packet;
class AggPacket;
class ATPPacket;
class MTATPPacket;
/**
 * Enum generated from <tt>simnet/mod/Packet.msg:2</tt> by opp_msgtool.
 * <pre>
 * enum PacketType
 * {
 *     ACK = 0;
 *     DATA = 1;
 *     AGG = 2;
 *     REMIND = 3;
 *     NOUSE = 4;
 * }
 * </pre>
 */
enum PacketType {
    ACK = 0,
    DATA = 1,
    AGG = 2,
    REMIND = 3,
    NOUSE = 4
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PacketType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PacketType& e) { int n; b->unpack(n); e = static_cast<PacketType>(n); }

/**
 * Enum generated from <tt>simnet/mod/Packet.msg:11</tt> by opp_msgtool.
 * <pre>
 * enum AggPolicy
 * {
 *     ATP = 0;
 *     MTATP = 1;
 * }
 * </pre>
 */
enum AggPolicy {
    ATP = 0,
    MTATP = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AggPolicy& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AggPolicy& e) { int n; b->unpack(n); e = static_cast<AggPolicy>(n); }

/**
 * Class generated from <tt>simnet/mod/Packet.msg:17</tt> by opp_msgtool.
 * <pre>
 * packet EthernetMacHeader
 * {
 *     byteLength = 14; // ! only this affects size
 *     uint32_t destinationMacAddr; // 6B
 *     uint32_t sourceMacAddr; // 6B
 *     uint32_t etherType; // 4B
 * 
 * }
 * </pre>
 */
class EthernetMacHeader : public ::omnetpp::cPacket
{
  protected:
    uint32_t destinationMacAddr = 0;
    uint32_t sourceMacAddr = 0;
    uint32_t etherType = 0;

  private:
    void copy(const EthernetMacHeader& other);

  protected:
    bool operator==(const EthernetMacHeader&) = delete;

  public:
    EthernetMacHeader(const char *name=nullptr, short kind=0);
    EthernetMacHeader(const EthernetMacHeader& other);
    virtual ~EthernetMacHeader();
    EthernetMacHeader& operator=(const EthernetMacHeader& other);
    virtual EthernetMacHeader *dup() const override {return new EthernetMacHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint32_t getDestinationMacAddr() const;
    virtual void setDestinationMacAddr(uint32_t destinationMacAddr);

    virtual uint32_t getSourceMacAddr() const;
    virtual void setSourceMacAddr(uint32_t sourceMacAddr);

    virtual uint32_t getEtherType() const;
    virtual void setEtherType(uint32_t etherType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetMacHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetMacHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>simnet/mod/Packet.msg:26</tt> by opp_msgtool.
 * <pre>
 * class IPv4Header extends EthernetMacHeader
 * {
 *     byteLength = 14 + 20;
 *     uint8_t version = 4; // 4 bits
 *     uint8_t IHL; // internet header length 4 bits
 *     uint8_t DSCP; // 6 bits
 *     uint8_t ipECN; // 2 bits
 *     uint16_t totalLength; // 2B
 *     uint8_t identification; // 2B
 *     uint8_t ipFlags; // 3 bits
 *     uint8_t fragmentOffset; // 13 bits;
 *     uint8_t TTL; // 1B
 *     uint8_t protocol; // 1B
 *     uint16_t checksum; // 2B
 *     int64_t srcAddr; // 4B
 *     int64_t destAddr; // 4B
 *     uint64_t options; // if IHL > 5
 * }
 * </pre>
 */
class IPv4Header : public ::EthernetMacHeader
{
  protected:
    uint8_t version = 4;
    uint8_t IHL = 0;
    uint8_t DSCP = 0;
    uint8_t ipECN = 0;
    uint16_t totalLength = 0;
    uint8_t identification = 0;
    uint8_t ipFlags = 0;
    uint8_t fragmentOffset = 0;
    uint8_t TTL = 0;
    uint8_t protocol = 0;
    uint16_t checksum = 0;
    int64_t srcAddr = 0;
    int64_t destAddr = 0;
    uint64_t options = 0;

  private:
    void copy(const IPv4Header& other);

  protected:
    bool operator==(const IPv4Header&) = delete;

  public:
    IPv4Header(const char *name=nullptr);
    IPv4Header(const IPv4Header& other);
    virtual ~IPv4Header();
    IPv4Header& operator=(const IPv4Header& other);
    virtual IPv4Header *dup() const override {return new IPv4Header(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getVersion() const;
    virtual void setVersion(uint8_t version);

    virtual uint8_t getIHL() const;
    virtual void setIHL(uint8_t IHL);

    virtual uint8_t getDSCP() const;
    virtual void setDSCP(uint8_t DSCP);

    virtual uint8_t getIpECN() const;
    virtual void setIpECN(uint8_t ipECN);

    virtual uint16_t getTotalLength() const;
    virtual void setTotalLength(uint16_t totalLength);

    virtual uint8_t getIdentification() const;
    virtual void setIdentification(uint8_t identification);

    virtual uint8_t getIpFlags() const;
    virtual void setIpFlags(uint8_t ipFlags);

    virtual uint8_t getFragmentOffset() const;
    virtual void setFragmentOffset(uint8_t fragmentOffset);

    virtual uint8_t getTTL() const;
    virtual void setTTL(uint8_t TTL);

    virtual uint8_t getProtocol() const;
    virtual void setProtocol(uint8_t protocol);

    virtual uint16_t getChecksum() const;
    virtual void setChecksum(uint16_t checksum);

    virtual int64_t getSrcAddr() const;
    virtual void setSrcAddr(int64_t srcAddr);

    virtual int64_t getDestAddr() const;
    virtual void setDestAddr(int64_t destAddr);

    virtual uint64_t getOptions() const;
    virtual void setOptions(uint64_t options);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const IPv4Header& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, IPv4Header& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>simnet/mod/Packet.msg:45</tt> by opp_msgtool.
 * <pre>
 * class IPv6Header extends EthernetMacHeader
 * {
 *     byteLength = 14 + 40;
 *     uint8_t version = 6; // 4 bits
 *     //    uint8_t trafficClass; // 8bits
 *     //    uint32_t flowLabel; // 20 bits
 *     //    uint16_t payloadLength; // 2B
 *     //    uint8_t nextHeader; // 1B
 *     //    uint8_t TTL; // 1B
 *     int64_t srcAddr; // 16B
 *     int64_t destAddr; // 16B
 * }
 * </pre>
 */
class IPv6Header : public ::EthernetMacHeader
{
  protected:
    uint8_t version = 6;
    int64_t srcAddr = 0;
    int64_t destAddr = 0;

  private:
    void copy(const IPv6Header& other);

  protected:
    bool operator==(const IPv6Header&) = delete;

  public:
    IPv6Header(const char *name=nullptr);
    IPv6Header(const IPv6Header& other);
    virtual ~IPv6Header();
    IPv6Header& operator=(const IPv6Header& other);
    virtual IPv6Header *dup() const override {return new IPv6Header(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getVersion() const;
    virtual void setVersion(uint8_t version);

    virtual int64_t getSrcAddr() const;
    virtual void setSrcAddr(int64_t srcAddr);

    virtual int64_t getDestAddr() const;
    virtual void setDestAddr(int64_t destAddr);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const IPv6Header& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, IPv6Header& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>simnet/mod/Packet.msg:58</tt> by opp_msgtool.
 * <pre>
 * class SegmentRoutingHeader extends IPv6Header
 * {
 *     //    uint8_t nextHeader; // 1B
 *     uint8_t hdrLength; // Header extension length 1B
 *     uint8_t routingType; // 1B
 *     uint8_t segmentsLeft; // 1B
 *     uint8_t lastEntry; //1B
 *     uint8_t srhFlags; // 1B
 *     uint16_t srhTag; // 2B
 *     // below three are together segmentList each 16B
 *     int64_t SID[];
 *     string function[];
 *     string args[];
 * }
 * </pre>
 */
class SegmentRoutingHeader : public ::IPv6Header
{
  protected:
    uint8_t hdrLength = 0;
    uint8_t routingType = 0;
    uint8_t segmentsLeft = 0;
    uint8_t lastEntry = 0;
    uint8_t srhFlags = 0;
    uint16_t srhTag = 0;
    int64_t *SID = nullptr;
    size_t SID_arraysize = 0;
    omnetpp::opp_string *function = nullptr;
    size_t function_arraysize = 0;
    omnetpp::opp_string *args = nullptr;
    size_t args_arraysize = 0;

  private:
    void copy(const SegmentRoutingHeader& other);

  protected:
    bool operator==(const SegmentRoutingHeader&) = delete;

  public:
    SegmentRoutingHeader(const char *name=nullptr);
    SegmentRoutingHeader(const SegmentRoutingHeader& other);
    virtual ~SegmentRoutingHeader();
    SegmentRoutingHeader& operator=(const SegmentRoutingHeader& other);
    virtual SegmentRoutingHeader *dup() const override {return new SegmentRoutingHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getHdrLength() const;
    virtual void setHdrLength(uint8_t hdrLength);

    virtual uint8_t getRoutingType() const;
    virtual void setRoutingType(uint8_t routingType);

    virtual uint8_t getSegmentsLeft() const;
    virtual void setSegmentsLeft(uint8_t segmentsLeft);

    virtual uint8_t getLastEntry() const;
    virtual void setLastEntry(uint8_t lastEntry);

    virtual uint8_t getSrhFlags() const;
    virtual void setSrhFlags(uint8_t srhFlags);

    virtual uint16_t getSrhTag() const;
    virtual void setSrhTag(uint16_t srhTag);

    virtual void setSIDArraySize(size_t size);
    virtual size_t getSIDArraySize() const;
    virtual int64_t getSID(size_t k) const;
    virtual void setSID(size_t k, int64_t SID);
    virtual void insertSID(size_t k, int64_t SID);
    [[deprecated]] void insertSID(int64_t SID) {appendSID(SID);}
    virtual void appendSID(int64_t SID);
    virtual void eraseSID(size_t k);

    virtual void setFunctionArraySize(size_t size);
    virtual size_t getFunctionArraySize() const;
    virtual const char * getFunction(size_t k) const;
    virtual void setFunction(size_t k, const char * function);
    virtual void insertFunction(size_t k, const char * function);
    [[deprecated]] void insertFunction(const char * function) {appendFunction(function);}
    virtual void appendFunction(const char * function);
    virtual void eraseFunction(size_t k);

    virtual void setArgsArraySize(size_t size);
    virtual size_t getArgsArraySize() const;
    virtual const char * getArgs(size_t k) const;
    virtual void setArgs(size_t k, const char * args);
    virtual void insertArgs(size_t k, const char * args);
    [[deprecated]] void insertArgs(const char * args) {appendArgs(args);}
    virtual void appendArgs(const char * args);
    virtual void eraseArgs(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SegmentRoutingHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SegmentRoutingHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>simnet/mod/Packet.msg:73</tt> by opp_msgtool.
 * <pre>
 * class Packet extends SegmentRoutingHeader
 * {
 *     // udp/tcp fields
 *     int64_t seqNumber;
 *     uint16_t localPort;
 *     uint16_t destPort;
 *     bool ECN;
 *     bool ECE;
 *     // cheating fields
 *     PacketType packetType;
 *     int64_t connectionId;
 *     int64_t receivedBytes;
 *     double startTime;
 *     double transmitTime;
 *     double queueTime;
 *     bool isFlowFinished;
 * }
 * </pre>
 */
class Packet : public ::SegmentRoutingHeader
{
  protected:
    int64_t seqNumber = 0;
    uint16_t localPort = 0;
    uint16_t destPort = 0;
    bool ECN = false;
    bool ECE = false;
    PacketType packetType = static_cast<PacketType>(-1);
    int64_t connectionId = 0;
    int64_t receivedBytes = 0;
    double startTime = 0;
    double transmitTime = 0;
    double queueTime = 0;
    bool isFlowFinished_ = false;

  private:
    void copy(const Packet& other);

  protected:
    bool operator==(const Packet&) = delete;

  public:
    Packet(const char *name=nullptr);
    Packet(const Packet& other);
    virtual ~Packet();
    Packet& operator=(const Packet& other);
    virtual Packet *dup() const override {return new Packet(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int64_t getSeqNumber() const;
    virtual void setSeqNumber(int64_t seqNumber);

    virtual uint16_t getLocalPort() const;
    virtual void setLocalPort(uint16_t localPort);

    virtual uint16_t getDestPort() const;
    virtual void setDestPort(uint16_t destPort);

    virtual bool getECN() const;
    virtual void setECN(bool ECN);

    virtual bool getECE() const;
    virtual void setECE(bool ECE);

    virtual PacketType getPacketType() const;
    virtual void setPacketType(PacketType packetType);

    virtual int64_t getConnectionId() const;
    virtual void setConnectionId(int64_t connectionId);

    virtual int64_t getReceivedBytes() const;
    virtual void setReceivedBytes(int64_t receivedBytes);

    virtual double getStartTime() const;
    virtual void setStartTime(double startTime);

    virtual double getTransmitTime() const;
    virtual void setTransmitTime(double transmitTime);

    virtual double getQueueTime() const;
    virtual void setQueueTime(double queueTime);

    virtual bool isFlowFinished() const;
    virtual void setIsFlowFinished(bool isFlowFinished);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Packet& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Packet& obj) {obj.parsimUnpack(b);}

// cplusplus {{
#include <vector>
// }}

/**
 * Class generated from <tt>simnet/mod/Packet.msg:95</tt> by opp_msgtool.
 * <pre>
 * class AggPacket extends Packet
 * {
 *     packetType = AGG;
 *     AggPolicy aggPolicy;
 *     int round;
 *     int aggregatorIndex;
 *     int64_t jobId;
 *     int workerNumber;
 *     bool overflow;
 *     bool resend;
 *     bool collision;
 *     bool ecn;
 *     bool isAck;
 *     // cheating fields
 *     int64_t workerRecord[] \@custom \@sizeGetter(getRecordLen) \@sizeSetter(setRecordLen) \@getter(getRecord) \@setter(setRecord);
 * }
 * </pre>
 */
class AggPacket : public ::Packet
{
  protected:
    AggPolicy aggPolicy = static_cast<AggPolicy>(-1);
    int round = 0;
    int aggregatorIndex = 0;
    int64_t jobId = 0;
    int workerNumber = 0;
    bool overflow = false;
    bool resend = false;
    bool collision = false;
    bool ecn = false;
    bool isAck_ = false;

  private:
    void copy(const AggPacket& other);

  protected:
    bool operator==(const AggPacket&) = delete;

  public:
    AggPacket(const char *name=nullptr);
    AggPacket(const AggPacket& other);
    virtual ~AggPacket();
    AggPacket& operator=(const AggPacket& other);
    virtual AggPacket *dup() const override {return new AggPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual AggPolicy getAggPolicy() const;
    virtual void setAggPolicy(AggPolicy aggPolicy);

    virtual int getRound() const;
    virtual void setRound(int round);

    virtual int getAggregatorIndex() const;
    virtual void setAggregatorIndex(int aggregatorIndex);

    virtual int64_t getJobId() const;
    virtual void setJobId(int64_t jobId);

    virtual int getWorkerNumber() const;
    virtual void setWorkerNumber(int workerNumber);

    virtual bool getOverflow() const;
    virtual void setOverflow(bool overflow);

    virtual bool getResend() const;
    virtual void setResend(bool resend);

    virtual bool getCollision() const;
    virtual void setCollision(bool collision);

    virtual bool getEcn() const;
    virtual void setEcn(bool ecn);

    virtual bool isAck() const;
    virtual void setIsAck(bool isAck);


    protected:
        std::vector<int64_t> workerRecord;
    public:
        // expected methods:
        virtual void setRecordLen(size_t size) {
            workerRecord.reserve(size);
        }
        virtual size_t getRecordLen() const {return workerRecord.size();}
        virtual std::vector<int64_t> getRecord() const {return workerRecord;}
        virtual int64_t getRecord(size_t k) {return workerRecord.at(k);}
        virtual void setRecord(size_t k, int64_t worker) {
            EV_WARN << "You should not use this method, but using addRecord instead." << std::endl;
            workerRecord[k] = worker;
        }
        //new methods:
        virtual void addRecord(int64_t worker) {
            workerRecord.push_back(worker);
        }
        virtual void setRecord(std::vector<int64_t>& workers) {
            auto oldLen = getRecordLen();
            for (auto i = 0; i < oldLen; i++) {
                workerRecord[i] = workers.back();
                workers.pop_back();
            }
            while (!workers.empty()) {
                workerRecord.push_back(workers.back());
                workers.pop_back();
            }
        }
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AggPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AggPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>simnet/mod/Packet.msg:151</tt> by opp_msgtool.
 * <pre>
 * class ATPPacket extends AggPacket
 * {
 *     aggPolicy = ATP;
 *     byteLength = 16 + 8; // ATP header total size is 58 Bytes
 *     uint32_t bitmap0;
 *     uint32_t bitmap1;
 *     int fanIndegree0;
 *     int fanIndegree1;
 *     int switchIdentifier;
 * }
 * </pre>
 */
class ATPPacket : public ::AggPacket
{
  protected:
    uint32_t bitmap0 = 0;
    uint32_t bitmap1 = 0;
    int fanIndegree0 = 0;
    int fanIndegree1 = 0;
    int switchIdentifier = 0;

  private:
    void copy(const ATPPacket& other);

  protected:
    bool operator==(const ATPPacket&) = delete;

  public:
    ATPPacket(const char *name=nullptr);
    ATPPacket(const ATPPacket& other);
    virtual ~ATPPacket();
    ATPPacket& operator=(const ATPPacket& other);
    virtual ATPPacket *dup() const override {return new ATPPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint32_t getBitmap0() const;
    virtual void setBitmap0(uint32_t bitmap0);

    virtual uint32_t getBitmap1() const;
    virtual void setBitmap1(uint32_t bitmap1);

    virtual int getFanIndegree0() const;
    virtual void setFanIndegree0(int fanIndegree0);

    virtual int getFanIndegree1() const;
    virtual void setFanIndegree1(int fanIndegree1);

    virtual int getSwitchIdentifier() const;
    virtual void setSwitchIdentifier(int switchIdentifier);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ATPPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ATPPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>simnet/mod/Packet.msg:162</tt> by opp_msgtool.
 * <pre>
 * class MTATPPacket extends AggPacket
 * {
 *     aggPolicy = MTATP;
 *     byteLength = 16 + 4;
 *     int timer;
 *     int aggCounter;
 *     bool flags[5];
 *     int treeCost;
 * }
 * </pre>
 */
class MTATPPacket : public ::AggPacket
{
  protected:
    int timer = 0;
    int aggCounter = 0;
    bool flags[5];
    int treeCost = 0;

  private:
    void copy(const MTATPPacket& other);

  protected:
    bool operator==(const MTATPPacket&) = delete;

  public:
    MTATPPacket(const char *name=nullptr);
    MTATPPacket(const MTATPPacket& other);
    virtual ~MTATPPacket();
    MTATPPacket& operator=(const MTATPPacket& other);
    virtual MTATPPacket *dup() const override {return new MTATPPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getTimer() const;
    virtual void setTimer(int timer);

    virtual int getAggCounter() const;
    virtual void setAggCounter(int aggCounter);

    virtual size_t getFlagsArraySize() const;
    virtual bool getFlags(size_t k) const;
    virtual void setFlags(size_t k, bool flags);

    virtual int getTreeCost() const;
    virtual void setTreeCost(int treeCost);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MTATPPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MTATPPacket& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline EthernetMacHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<EthernetMacHeader*>(ptr.get<cObject>()); }
template<> inline IPv4Header *fromAnyPtr(any_ptr ptr) { return check_and_cast<IPv4Header*>(ptr.get<cObject>()); }
template<> inline IPv6Header *fromAnyPtr(any_ptr ptr) { return check_and_cast<IPv6Header*>(ptr.get<cObject>()); }
template<> inline SegmentRoutingHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<SegmentRoutingHeader*>(ptr.get<cObject>()); }
template<> inline Packet *fromAnyPtr(any_ptr ptr) { return check_and_cast<Packet*>(ptr.get<cObject>()); }
template<> inline AggPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<AggPacket*>(ptr.get<cObject>()); }
template<> inline ATPPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<ATPPacket*>(ptr.get<cObject>()); }
template<> inline MTATPPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<MTATPPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __PACKET_M_H

