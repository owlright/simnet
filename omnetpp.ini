[General]
#debug-on-errors = true
#record-eventlog = true
#eventlog-message-detail-pattern = Packet:declaredOn(Packet) or bitLength
#eventlog-message-detail-pattern = *
**.vector-recording = false
**.scalar-recording = false
**.bin-recording = false
**.appType = "App"
**.app.packetLength = 1000 bytes
num-rngs=3
[Net60CutThrough]
network = networks.Net60
description = "60 node network with cut-through switching"
**.app.packetLength = 32768 bytes
**.useCutThroughSwitching = true  # let packets flow through the routers
**.destAddresses = "1 50"
**.sendIaTime = uniform(1ms, 5ms)

[Net60StoreAndForward]
network = networks.Net60
description = "60 node network with store-and-forward switching"
**.app.packetLength = 32768 bytes
**.destAddresses = "1 50"
**.sendIaTime = uniform(1ms, 5ms)

[Net60Bursty]
network = networks.Net60
**.appType = "BurstyApp"  # override "App" in [General]
**.app.packetLength = intuniform(2048 byte, 16384 byte)
**.destAddresses = "1 50"

[Net60a]
network = networks.Net60a
**.destAddresses = "1 28 50"

[Net5]
network = networks.Net5
**.destAddresses = "1 3"
**.sendIaTime = uniform(500ms, 1500ms)  # high traffic

[Nto1]
network = networks.Nto1
sim-time-limit = 20ms
**.numberOfSenders = 4
**.ecnThreshold = 20
**.sender[*].app.socket.cwnd:vector.vector-recording = true
**.sender[*].queue[*].qlen:vector.vector-recording=true
**.gate.queue[0].qlen:vector.vector-recording=true

[AggrGroup]
network = networks.Aggr
sim-time-limit = 20ms
**.ecnThreshold = 20
**.socket.rng-0 = 0
**.group1[*].app.socket.cwnd:vector.vector-recording = true
#**.group1[*].queue[*].qlen:vector.vector-recording=true
**.group2[*].app.socket.cwnd:vector.vector-recording = true
#**.group2[*].queue[*].qlen:vector.vector-recording=true
**.aggr1.queue[2].qlen:vector.vector-recording = true
**.aggr2.queue[4].qlen:vector.vector-recording=true
**.gate.queue[*].qlen:vector.vector-recording=true
*.controller.aggrouter =  [[10], [20]]
*.controller.aggrbuffer = [[8], [8]]
*.controller.aggrnumber = [[2], [4]]
*.controller.targets = [40, 41]

[BinaryTree]
network = networks.BinaryTree
**.height = 3 # 2^height terminals
# these nodes are routers
**.terminal[0..2].appType = "Buffer"
**.terminal[7].app.destAddress = -1

# rest nodes are hosts
**.terminal[*].app.destAddress = 7
**.terminal[*].app.groupAddress = 7
**.controller.aggrouter = [[0, 1, 2]]
**.controller.aggrbuffer = [[1, 1, 1]]
**.controller.aggrnumber = [[2, 2, 2]]
**.controller.targets = [7]
**.packetTotalCount = 10
**.sendIaTime = 1s
**.ecnThreshold = 10

[Dumbbell]
network = networks.Dumbbell
sim-time-limit = 20ms
**.numberFlows = 1

**.routing.dataRate.throughput.interval = 500us
#**.sender[0].queue[*].qlen:vector.vector-recording=true
#**.sender[0].queue[*].congestion:vector.vector-recording=true
**.sender[*].**.cong.*.vector-recording = true
**.sender[*].app.socket.cwnd:vector.vector-recording = true

**.sender[*].queue[*].qlen:vector.vector-recording=true
**.LR.queue[*].qlen:vector.vector-recording=true
**.LR.queue[*].congestion:vector.vector-recording=true
#**.sender[0].queue[*].qlen.result-recording-modes = +vector

#**.queue[*].qlen.result-recording-modes = +vector  # default plus vector
#**.congestion[*].result-recording-modes = +vector  # default plus vector
**.ecnThreshold = 10

#**.result-recording-modes = all  # turn on recording of optional vectors
#**.frameCapacity = 10


[Net5SaturatedQueue]  # Note: this config is used by the Python/Pandas tutorial -- do not touch!
network = networks.Net5
sim-time-limit = 200s
**.frameCapacity = 10
**.destAddresses = "1 4"
**.sendIaTime = uniform(100ms, 500ms)  # high traffic
**.app.packetLength = intuniform(50 bytes, 4096 bytes)
**.channel.*.result-recording-modes = -vector  # turn off vectors from channels
**.result-recording-modes = all  # turn on recording of optional vectors

[Net10]
network = networks.Net10
**.app.packetLength = intuniform(128 byte, 1024 byte)
**.destAddresses = "1 6 8"

[Net10Experiment]
network = networks.Net10
**.destAddresses = "1"
**.app.sendIaTime = exponential(${iaMean = 170..400 step 10 } ms)
**.queue[*].useCutThroughSwitching = ${cutThrough = false, true }
**.queue[*].frameCapacity = 100
**.vector-recording = false
sim-time-limit = 1200s

[RandomGraph]
network = networks.RandomGraph
**.destAddresses = "0 2"

[Mesh]
network = networks.Mesh
**.destAddresses = "0 18 52"

[RandomMesh]
network = networks.RandomMesh
**.destAddresses = "0 18 52"

[NetBuilder]
network = networks.Dynamic
**.address = int(replace(fullName(), "rte", ""))
**.destAddresses = "1 50"
