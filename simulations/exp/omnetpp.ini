[General]
repeat = 4
seed-set = ${repetition}
#sim-time-limit = 2s
**.param-recording = false
**.vector-recording = false
**.scalar-recording = false
**.queue[*].ecnThreshold = 50
**.metricCollector.showProgressInfo = true
**.metricCollector.progressInterval = 10 # every 10 seconds

[fatTreeK10LoadbalancePermutation]
network = simnet.simulations.networks.FatTree
*.fct:vector.vector-recording = true
*.idealFct:vector.vector-recording = true
*.flowSize:vector.vector-recording = true
*.jobRCT:vector.vector-recording = true
#**.workers[*].cwnd:vector.vector-recording = true
#**.routing.bufferInUse:vector.vector-recording = true
#**.queue[*].qlen:vector.vector-recording = true
**.cong.typename = "Dctcp"
**.linkBW = 10Gbps
**.ecmpFlow = true
**.k = 10
**.maxAgtrNum = 0
**.maxDisorderNumber = 100 # set this to a big number to avoid resend
**.cong.initWinSize = 10kB
**.tpManager.trafficPattern = "uniform"

**.hosts[*].numFlows = 80 # each host maximum send flows number, 0 silent, -1 infinity
**.hosts[*].load = ${load=0.1, 0.5, 0.9}
**.hosts[*].flowSizeMean = 20B+40*cdf_mean("WebSearch_distribution")
**.hosts[*].numApps = 1
**.hosts[*].apps[*].flowSize = 20B+40*cdf("WebSearch_distribution")
**.hosts[*].apps[0].typename = "EchoApp"

**.workers[*].flowSize = 20MB
**.workers[*].numRounds = 25
**.workers[*].load = .9
**.pses[*].messageLength = 64B
**.groupManager.placementPolicy = "random"
**.groupManager.aggTreeType = ${aggPolicy = "sptree"}
**.groupManager.numGroups = 1
**.groupManager.numWorkers = 8
**.groupManager.costThreshold = ${epsion=0.0,1.0}

[fatTree1024loadbalancepermutation]
network = simnet.simulations.networks.FatTree
*.fct:vector.vector-recording = true
*.idealFct:vector.vector-recording = true
*.flowSize:vector.vector-recording = true
*.jobRCT:vector.vector-recording = true
#**.workers[*].cwnd:vector.vector-recording = true
#**.routing.bufferInUse:vector.vector-recording = true
#**.queue[*].qlen:vector.vector-recording = true
**.cong.typename = "Dctcp"
**.linkBW = 10Gbps
**.ecmpFlow = true
**.k = 4
**.maxAgtrNum = 0
**.maxDisorderNumber = 100 # set this to a big number to avoid resend
**.cong.initWinSize = 10kB
**.tpManager.trafficPattern = "uniform"

**.hosts[*].numFlows = 0 # each host maximum send flows number, 0 silent, -1 infinity
**.hosts[*].load = ${load=0.1, 0.5, 0.9}
**.hosts[*].flowSizeMean = 20B+40*cdf_mean("WebSearch_distribution")
**.hosts[*].numApps = 1
**.hosts[*].apps[*].flowSize = 20B+40*cdf("WebSearch_distribution")
**.hosts[*].apps[0].typename = "EchoApp"

**.workers[*].flowSize = 20MB
**.workers[*].numRounds = 50
**.workers[*].load = .9
**.pses[*].messageLength = 64B
**.groupManager.placementPolicy = "random"
**.groupManager.aggTreeType = ${aggPolicy = "sptree"}
**.groupManager.numGroups = 1
**.groupManager.numWorkers = 8
**.groupManager.costThreshold = ${epsion=-1.0,0.0}


[spineleaf1024policypermutation]
network = simnet.simulations.networks.SpineLeafNetwork
*.fct:vector.vector-recording = true
*.idealFct:vector.vector-recording = true
*.flowSize:vector.vector-recording = true
*.jobRCT:vector.vector-recording = true
#**.workers[*].cwnd:vector.vector-recording = true
#**.routing.bufferInUse:vector.vector-recording = true
#**.queue[*].qlen:vector.vector-recording = true
**.cong.typename = "Dctcp"

**.ecmpFlow = true
SpineLeafNetwork.fabricLinkBW = 40Gbps
SpineLeafNetwork.fabricLinkDealy = 1us
SpineLeafNetwork.edgeLinkBW = 10 Gbps
SpineLeafNetwork.edgeLinkDelay = 1us
**.spineNumber = 8
**.leafNumber = 32
**.hostNumber = 32
**.maxAgtrNum = 0
**.maxDisorderNumber = 100 # set this to a big number to avoid resend
**.load = ${load=0.1, 0.5, 0.9}
#**.load = 0.1
**.hosts[*].flowSizeMean = 20B+cdf_mean("WebSearch_distribution")
**.hosts[*].apps[*].flowSize = 20B+cdf("WebSearch_distribution")
**.tpManager.trafficPattern = "permutation"
**.numApps = 1
**.apps[0].typename = "EchoApp"
**.cong.initWinSize = 10kB
**.workers[*].flowSize = 20MB
**.workers[*].numRounds = 50
**.pses[*].messageLength = 64B
**.groupManager.placementPolicy = "random"
**.groupManager.aggTreeType = ${aggPolicy = "sptree", "edge"}
**.groupManager.numGroups = 12
**.groupManager.numWorkers = 64
**.numFlows = 150 # each host maximum send flows number
**.groupManager.costThreshold = ${epsion=-1.0, 0.0}# ! can't find equal cost aggregation nodes
# **.groupManager.costThreshold = -1.0




[spineleaf1024policyuniform]
network = simnet.simulations.networks.SpineLeafNetwork
*.fct:vector.vector-recording = true
*.idealFct:vector.vector-recording = true
*.flowSize:vector.vector-recording = true
*.jobRCT:vector.vector-recording = true
#**.workers[*].cwnd:vector.vector-recording = true
#**.routing.bufferInUse:vector.vector-recording = true
#**.queue[*].qlen:vector.vector-recording = true
**.cong.typename = "Dctcp"

**.ecmpFlow = true
SpineLeafNetwork.fabricLinkBW = 40Gbps
SpineLeafNetwork.fabricLinkDealy = 1us
SpineLeafNetwork.edgeLinkBW = 10 Gbps
SpineLeafNetwork.edgeLinkDelay = 1us
**.spineNumber = 8
**.leafNumber = 32
**.hostNumber = 32
**.maxAgtrNum = 0
**.maxDisorderNumber = 100 # set this to a big number to avoid resend
**.load = ${load=0.1, 0.5, 0.9}
#**.load = 0.1
**.hosts[*].flowSizeMean = 20B+cdf_mean("WebSearch_distribution")
**.hosts[*].apps[*].flowSize = 20B+cdf("WebSearch_distribution")
**.tpManager.trafficPattern = "uniform"
**.numApps = 1
**.apps[0].typename = "EchoApp"
**.cong.initWinSize = 10kB
**.workers[*].flowSize = 20MB
**.workers[*].numRounds = 50
**.pses[*].messageLength = 64B
**.groupManager.placementPolicy = "random"
**.groupManager.aggTreeType = ${aggPolicy = "sptree", "edge"}
**.groupManager.numGroups = 12
**.groupManager.numWorkers = 64
**.numFlows = 150 # each host maximum send flows number
**.groupManager.costThreshold = ${epsion=-1}# ! can't find equal cost aggregation nodes
# **.groupManager.costThreshold = -1.0


[AggEdgeOnFatTree]
network = simnet.simulations.networks.FatTree
**.metricCollector.job-*-RoundFinishTime:vector.vector-recording = true
**.apps[1..].fct:vector.vector-recording = true
**.apps[1..].idealFct:vector.vector-recording = true
**.apps[1..].flowSize:vector.vector-recording = true

**.ecmpFlow = true
**.k = 4
**.load = 0.8
**.hosts[*].flowSizeMean = cdf_mean("FbHdp_distribution")
**.hosts[*].apps[*].flowSize = cdf("FbHdp_distribution")
**.tpManager.trafficPattern = "uniform"
**.numApps = 1
**.apps[0].typename = "UnicastEchoApp"
**.workers[*].flowSize = 1000kB
**.workers[*].numRounds = 10
**.groupManager.placementPolicy = "random"
**.groupManager.aggTreeType = "edge"
**.groupManager.numGroups = ${numGroups=1,2,3,4}
**.groupManager.numWorkers = 3
